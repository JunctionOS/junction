From 91e91b77c943190411c23ae396db4d291f9644c6 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 30 Nov 2022 18:58:31 -0500
Subject: [PATCH 04/35] base: some tweaks to make things easier in junction

- disable backtrace calls on fatal exits
- init_shutdown directly calls syscall(group_exit) instead of running libc exit handlers
---
 base/init.c        | 3 ++-
 base/log.c         | 2 +-
 base/syscall.S     | 6 ++++++
 inc/base/syscall.h | 5 ++++-
 4 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/base/init.c b/base/init.c
index c8ac0477..bdc3502d 100644
--- a/base/init.c
+++ b/base/init.c
@@ -6,6 +6,7 @@
 
 #include <base/init.h>
 #include <base/log.h>
+#include <base/syscall.h>
 #include <base/thread.h>
 
 #include "init_internal.h"
@@ -16,7 +17,7 @@ void __weak init_shutdown(int status)
 {
 	log_info("init: shutting down -> %s",
 		 status == EXIT_SUCCESS ? "SUCCESS" : "FAILURE");
-	exit(status);
+	syscall_exit(status);
 }
 
 /* we initialize these early subsystems by hand */
diff --git a/base/log.c b/base/log.c
index 088f83f1..4cf2dfa1 100644
--- a/base/log.c
+++ b/base/log.c
@@ -62,7 +62,7 @@ void logk_bug(bool fatal, const char *expr,
 {
 	logk(LOG_EMERG, "%s: %s:%d ASSERTION '%s' FAILED IN '%s'",
 	     fatal ? "FATAL" : "WARN", file, line, expr, func);
-	logk_backtrace();
+	// logk_backtrace();
 
 	if (fatal)
 		init_shutdown(EXIT_FAILURE);
diff --git a/base/syscall.S b/base/syscall.S
index df53b754..adf99c5b 100644
--- a/base/syscall.S
+++ b/base/syscall.S
@@ -53,5 +53,11 @@ syscall_mprotect:
 	syscall
 	ret
 
+.align 16
+.globl syscall_exit
+syscall_exit:
+	movl    $__NR_exit_group, %eax
+	syscall
+
 .globl base_syscall_end
 base_syscall_end:
diff --git a/inc/base/syscall.h b/inc/base/syscall.h
index c10f9fb3..88d36628 100644
--- a/inc/base/syscall.h
+++ b/inc/base/syscall.h
@@ -7,6 +7,8 @@
 #include <stddef.h>
 #include <sys/types.h>
 
+#include <base/compiler.h>
+
 extern const char base_syscall_start[];
 extern const char base_syscall_end[];
 
@@ -18,4 +20,5 @@ extern long syscall_mbind(void *start, size_t len, int mode,
 extern void syscall_rt_sigreturn(void);
 extern int syscall_ioctl(int fd, unsigned long int request, void *arg);
 extern int syscall_madvise(void *addr, size_t length, int advice);
-extern int syscall_mprotect(void *addr, size_t len, int prot);
\ No newline at end of file
+extern int syscall_mprotect(void *addr, size_t len, int prot);
+extern void syscall_exit(int status) __noreturn;
\ No newline at end of file
-- 
2.43.0

