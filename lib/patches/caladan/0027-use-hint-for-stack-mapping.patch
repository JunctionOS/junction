From f04d730afe6b8f293648c35ed2c3c0edb682c245 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Sun, 26 May 2024 17:52:46 -0400
Subject: [PATCH 27/35] use hint for stack mapping

---
 runtime/stack.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/runtime/stack.c b/runtime/stack.c
index 114bd9cc..97ce4793 100644
--- a/runtime/stack.c
+++ b/runtime/stack.c
@@ -14,15 +14,17 @@
 
 #include "defs.h"
 
+#define STACK_BASE_ADDR	0x200000000000UL
+
 static struct tcache *stack_tcache;
 DEFINE_PERTHREAD(struct tcache_perthread, stack_pt);
 
-static struct stack *stack_create(void)
+static struct stack *stack_create(void *base)
 {
 	void *stack_addr;
 	struct stack *s;
 
-	stack_addr = syscall_mmap(NULL, sizeof(struct stack), PROT_READ | PROT_WRITE,
+	stack_addr = syscall_mmap(base, sizeof(struct stack), PROT_READ | PROT_WRITE,
 			  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 	if (stack_addr == MAP_FAILED)
 		return NULL;
@@ -47,6 +49,7 @@ static void stack_reclaim(struct stack *s)
 static DEFINE_SPINLOCK(stack_lock);
 static int free_stack_count;
 static struct stack *free_stacks[RUNTIME_MAX_THREADS];
+static atomic64_t stack_pos = ATOMIC_INIT(STACK_BASE_ADDR);
 
 static void stack_tcache_free(struct tcache *tc, int nr, void **items)
 {
@@ -67,6 +70,7 @@ static void stack_tcache_free(struct tcache *tc, int nr, void **items)
 
 static int stack_tcache_alloc(struct tcache *tc, int nr, void **items)
 {
+	void *base;
 	int i = 0;
 	struct stack *s;
 
@@ -78,7 +82,9 @@ static int stack_tcache_alloc(struct tcache *tc, int nr, void **items)
 
 
 	for (; i < nr; i++) {
-		s = stack_create();
+		base = (void *)atomic64_fetch_and_add(&stack_pos,
+						      sizeof(struct stack));
+		s = stack_create(base);
 		if (unlikely(!s))
 			goto fail;
 		items[i] = stack_to_tcache_handle(s);
-- 
2.43.0

