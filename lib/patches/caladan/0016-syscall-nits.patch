From c2bfbb030bf541449af317c23e38cf192fb3fa8a Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 4 Apr 2023 02:26:06 +0000
Subject: [PATCH 16/35] syscall nits

---
 base/syscall.S     | 49 +++++++++++++++++++++++++++++++++++++++-------
 inc/base/syscall.h | 27 ++++++++++++++++++++++++-
 2 files changed, 68 insertions(+), 8 deletions(-)

diff --git a/base/syscall.S b/base/syscall.S
index 6783386a..118d2355 100644
--- a/base/syscall.S
+++ b/base/syscall.S
@@ -7,13 +7,22 @@
 base_syscall_start:
 
 .align 16
-.globl syscall_write
-.type syscall_write, @function
-syscall_write:
-	movl	$__NR_write, %eax
+.globl syscall_pwritev2
+.type syscall_pwritev2, @function
+syscall_pwritev2:
+	movl	$__NR_pwritev2, %eax
+	movq    %rcx, %r10
 	syscall
 	ret
 
+.align 16
+.globl syscall_writev
+.type syscall_writev, @function
+syscall_writev:
+        movl    $__NR_writev, %eax
+        syscall
+        ret
+
 .align 16
 .globl syscall_mmap
 syscall_mmap:
@@ -40,12 +49,38 @@ syscall_ioctl:
 .align 16
 .globl syscall_rt_sigreturn
 syscall_rt_sigreturn:
-	movl    $__NR_rt_sigreturn, %eax
-        // Invalidate the alternate signal stack entry in this frame
-        // so the kernel doesn't change it.
+	.cfi_startproc simple
+	.cfi_signal_frame
+	.cfi_def_cfa rsp, 40
+	.cfi_offset rsp, 120
+	.cfi_offset rip, 128
+
+	.cfi_offset r8, 0
+	.cfi_offset r9, 8
+	.cfi_offset r10, 16
+	.cfi_offset r11, 24
+	.cfi_offset r12, 32
+	.cfi_offset r13, 40
+	.cfi_offset r14, 48
+	.cfi_offset r15, 56
+	.cfi_offset rdi, 64
+	.cfi_offset rsi, 72
+	.cfi_offset rbp, 80
+	.cfi_offset rbx, 88
+	.cfi_offset rdx, 96
+	.cfi_offset rax, 104
+	.cfi_offset rcx, 112
+
+	movq    $__NR_rt_sigreturn, %rax
+	// Invalidate the alternate signal stack entry in this frame
+	// so the kernel doesn't change it.
 	movl    $4, 24(%rsp)
+
+	// Set mask to 0
+	movq    $0, 296(%rsp)
 	syscall
 	ret
+	.cfi_endproc
 
 .align 16
 .globl syscall_madvise
diff --git a/inc/base/syscall.h b/inc/base/syscall.h
index 3d67b370..7f2de807 100644
--- a/inc/base/syscall.h
+++ b/inc/base/syscall.h
@@ -6,6 +6,7 @@
 
 #include <stddef.h>
 #include <sys/types.h>
+#include <sys/uio.h>
 
 #include <base/compiler.h>
 
@@ -22,4 +23,28 @@ extern int syscall_ioctl(int fd, unsigned long int request, void *arg);
 extern int syscall_madvise(void *addr, size_t length, int advice);
 extern int syscall_mprotect(void *addr, size_t len, int prot);
 extern void syscall_exit(int status) __noreturn;
-extern ssize_t syscall_write(int fd, const void *buf, size_t count);
+extern ssize_t syscall_pwritev2(int fd, const struct iovec *iov, int iovcnt,
+	                            off_t offset_lo, off_t offset_hi, int flags);
+
+extern ssize_t syscall_writev(int fd, const struct iovec *iov, int iovcnt);
+
+static inline ssize_t syscall_pwrite(int fd, const void *buf, size_t count,
+	                                 off_t offset)
+{
+	const struct iovec iov = {
+		.iov_base = (void *)buf,
+		.iov_len = count
+	};
+
+	return syscall_pwritev2(fd, &iov, 1, offset, 0, 0);
+}
+
+static inline ssize_t syscall_write(int fd, const void *buf, size_t count)
+{
+	const struct iovec iov = {
+		.iov_base = (void *)buf,
+		.iov_len = count
+	};
+
+	return syscall_writev(fd, &iov, 1);
+}
-- 
2.43.0

