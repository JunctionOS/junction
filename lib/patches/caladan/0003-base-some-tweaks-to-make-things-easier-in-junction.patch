From 0d68e6c9b73a62532865c777eed0491160aa1c8c Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 30 Nov 2022 18:58:31 -0500
Subject: [PATCH 03/13] base: some tweaks to make things easier in junction

- disable backtrace calls on fatal exits
- init_shutdown directly calls syscall(group_exit) instead of running libc exit handlers
- do not call mbind in __mem_map_anom
---
 base/init.c        |  3 ++-
 base/log.c         |  2 +-
 base/mem.c         |  2 ++
 base/page.c        |  2 +-
 base/slab.c        | 10 +++++-----
 base/syscall.S     |  6 ++++++
 inc/base/syscall.h |  3 +++
 7 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/base/init.c b/base/init.c
index c8ac047..bdc3502 100644
--- a/base/init.c
+++ b/base/init.c
@@ -6,6 +6,7 @@
 
 #include <base/init.h>
 #include <base/log.h>
+#include <base/syscall.h>
 #include <base/thread.h>
 
 #include "init_internal.h"
@@ -16,7 +17,7 @@ void __weak init_shutdown(int status)
 {
 	log_info("init: shutting down -> %s",
 		 status == EXIT_SUCCESS ? "SUCCESS" : "FAILURE");
-	exit(status);
+	syscall_exit(status);
 }
 
 /* we initialize these early subsystems by hand */
diff --git a/base/log.c b/base/log.c
index 84a9d09..c085086 100644
--- a/base/log.c
+++ b/base/log.c
@@ -66,7 +66,7 @@ void logk_bug(bool fatal, const char *expr,
 {
 	logk(LOG_EMERG, "%s: %s:%d ASSERTION '%s' FAILED IN '%s'",
 	     fatal ? "FATAL" : "WARN", file, line, expr, func);
-	logk_backtrace();
+	// logk_backtrace();
 
 	if (fatal)
 		init_shutdown(EXIT_FAILURE);
diff --git a/base/mem.c b/base/mem.c
index 6a5e5ce..9dc7f80 100644
--- a/base/mem.c
+++ b/base/mem.c
@@ -88,10 +88,12 @@ __mem_map_anom(void *base, size_t len, size_t pgsize,
 	if ((intptr_t)addr < 0)
 		return MAP_FAILED;
 
+  /*
 	BUILD_ASSERT(sizeof(unsigned long) * 8 >= NNUMA);
 	if (syscall_mbind(addr, len, numa_policy, mask ? mask : NULL,
 		  mask ? NNUMA + 1 : 0, MPOL_MF_STRICT | MPOL_MF_MOVE))
 		goto fail;
+  */
 
 	if (cfg_transparent_hugepages_enabled && (pgsize > PGSIZE_4KB)) {
 	  if (syscall_madvise(addr, len, MADV_HUGEPAGE))
diff --git a/base/page.c b/base/page.c
index e0a6b33..9f1adef 100644
--- a/base/page.c
+++ b/base/page.c
@@ -354,7 +354,7 @@ int page_init(void)
 	addr = (void *)align_up((uintptr_t)addr, PGSIZE_2MB);
 
 	/* Then map NUMA-local large pages on top. */
-	for (i = 0; i < numa_count_with_mem; i++) {
+	for (i = 0; i < 1; i++) {
 		node = &lgpage_nodes[i];
 		node->tbl = mem_map_anom(
 			(char *)addr + i * LGPAGE_META_LEN,
diff --git a/base/slab.c b/base/slab.c
index 0d5c799..6241255 100644
--- a/base/slab.c
+++ b/base/slab.c
@@ -90,7 +90,7 @@ __slab_create(struct slab *s, const char *name, size_t size,
 	struct slab_node *n;
 	int i;
 
-	for (i = 0; i < numa_count_with_mem; i++) {
+	for (i = 0; i < 1; i++) {
 		n = (struct slab_node *)slab_alloc_on_node(&node_slab, i);
 		if (!n)
 			goto fail;
@@ -119,7 +119,7 @@ __slab_early_create(struct slab *s, struct slab_node *nodes,
 {
 	int i;
 
-	for (i = 0; i < numa_count_with_mem; i++) {
+	for (i = 0; i < 1; i++) {
 		__slab_create_node(&nodes[i], i, size, offset, flags, nr_elems);
 		s->nodes[i] = &nodes[i];
 	}
@@ -136,7 +136,7 @@ static int __slab_early_migrate(struct slab *s)
 	struct slab_node *n;
 	int i;
 
-	for (i = 0; i < numa_count_with_mem; i++) {
+	for (i = 0; i < 1; i++) {
 		n = (struct slab_node *)slab_alloc_on_node(&node_slab, i);
 		if (!n)
 			goto fail;
@@ -204,7 +204,7 @@ void slab_destroy(struct slab *s)
 	list_del(&s->link);
 	spin_unlock(&slab_lock);
 
-	for (i = 0; i < numa_count_with_mem; i++) {
+	for (i = 0; i < 1; i++) {
 		__slab_destroy_node(s->nodes[i]);
 		slab_free(&node_slab, s->nodes[i]);
 	}
@@ -460,7 +460,7 @@ void slab_print_usage(void)
 	list_for_each(&slab_list, s, link) {
 		size_t usage = 0;
 
-		for (i = 0; i < numa_count_with_mem; i++) {
+		for (i = 0; i < 1; i++) {
 			struct slab_node *n = s->nodes[i];
 
 			if (n->flags & SLAB_FLAG_LGPAGE) {
diff --git a/base/syscall.S b/base/syscall.S
index 41995c3..118d235 100644
--- a/base/syscall.S
+++ b/base/syscall.S
@@ -96,5 +96,11 @@ syscall_mprotect:
 	syscall
 	ret
 
+.align 16
+.globl syscall_exit
+syscall_exit:
+	movl    $__NR_exit_group, %eax
+	syscall
+
 .globl base_syscall_end
 base_syscall_end:
diff --git a/inc/base/syscall.h b/inc/base/syscall.h
index 367735c..2deec36 100644
--- a/inc/base/syscall.h
+++ b/inc/base/syscall.h
@@ -8,6 +8,8 @@
 #include <sys/types.h>
 #include <sys/uio.h>
 
+#include <base/compiler.h>
+
 extern const char base_syscall_start[];
 extern const char base_syscall_end[];
 
@@ -45,3 +47,4 @@ static inline ssize_t syscall_write(int fd, const void *buf, size_t count)
 
 	return syscall_writev(fd, &iov, 1);
 }
+extern void syscall_exit(int status) __noreturn;
-- 
2.43.0

