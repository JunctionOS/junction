From 680ca54f79df84b033fcfdb9bdd5a427446d2247 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 4 Jan 2023 14:08:00 -0500
Subject: [PATCH 05/35] base: use write syscall directly for logging

---
 base/log.c         | 14 +++++++++-----
 base/syscall.S     |  8 ++++++++
 inc/base/syscall.h |  3 ++-
 3 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/base/log.c b/base/log.c
index 4cf2dfa1..c085086b 100644
--- a/base/log.c
+++ b/base/log.c
@@ -11,6 +11,7 @@
 #include <base/stddef.h>
 #include <base/log.h>
 #include <base/time.h>
+#include <base/syscall.h>
 #include <asm/ops.h>
 
 #define MAX_LOG_LEN 4096
@@ -23,7 +24,7 @@ void logk(int level, const char *fmt, ...)
 	char buf[MAX_LOG_LEN];
 	va_list ptr;
 	off_t off;
-	int cpu;
+	int cpu, ret;
 
 	if (level > max_loglevel)
 		return;
@@ -41,12 +42,15 @@ void logk(int level, const char *fmt, ...)
 
 	off = strlen(buf);
 	va_start(ptr, fmt);
-	vsnprintf(buf + off, MAX_LOG_LEN - off, fmt, ptr);
+	ret = vsnprintf(buf + off, MAX_LOG_LEN - off, fmt, ptr);
 	va_end(ptr);
-	puts(buf);
 
-	if (level <= LOG_ERR)
-		fflush(stdout);
+	if (unlikely(ret < 0))
+		ret = 0;
+
+	off = MIN(MAX_LOG_LEN - 1, off + ret);
+	buf[off] = '\n';
+	syscall_write(1, buf, off + 1);
 }
 
 #define MAX_CALL_DEPTH	256
diff --git a/base/syscall.S b/base/syscall.S
index adf99c5b..6783386a 100644
--- a/base/syscall.S
+++ b/base/syscall.S
@@ -6,6 +6,14 @@
 .globl base_syscall_start
 base_syscall_start:
 
+.align 16
+.globl syscall_write
+.type syscall_write, @function
+syscall_write:
+	movl	$__NR_write, %eax
+	syscall
+	ret
+
 .align 16
 .globl syscall_mmap
 syscall_mmap:
diff --git a/inc/base/syscall.h b/inc/base/syscall.h
index 88d36628..3d67b370 100644
--- a/inc/base/syscall.h
+++ b/inc/base/syscall.h
@@ -21,4 +21,5 @@ extern void syscall_rt_sigreturn(void);
 extern int syscall_ioctl(int fd, unsigned long int request, void *arg);
 extern int syscall_madvise(void *addr, size_t length, int advice);
 extern int syscall_mprotect(void *addr, size_t len, int prot);
-extern void syscall_exit(int status) __noreturn;
\ No newline at end of file
+extern void syscall_exit(int status) __noreturn;
+extern ssize_t syscall_write(int fd, const void *buf, size_t count);
-- 
2.43.0

