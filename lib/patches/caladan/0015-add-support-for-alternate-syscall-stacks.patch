From 46266596c6d03bd26dd9f9873abdafe840c1bc5e Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Mon, 20 Feb 2023 17:11:28 -0500
Subject: [PATCH 15/35] add support for alternate syscall stacks

some applications do not have space on their stacks for syscalls

support these applications in two ways:
- add a second per-thread stack that can be used for handling syscalls in junction
- add cfg option to use a sigaltstack - this is needed when syscalls are
intercepted with seccomp. using this option disables preemption in the runtime.
---
 inc/runtime/thread.h |  1 +
 runtime/cfg.c        |  9 ++++++++-
 runtime/defs.h       |  1 +
 runtime/init.c       |  2 +-
 runtime/preempt.c    | 21 +++++++++++++++++++++
 runtime/sched.c      |  7 +++++++
 6 files changed, 39 insertions(+), 2 deletions(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index 3b481c58..1b7a964b 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -56,6 +56,7 @@ struct stack;
 struct thread {
     struct thread_tf    tf;
     struct list_node    link;
+    struct stack        *syscallstack;
     struct stack        *stack;
     unsigned int        main_thread:1;
     unsigned int        has_fsbase:1;
diff --git a/runtime/cfg.c b/runtime/cfg.c
index cbf240a7..c88d746a 100644
--- a/runtime/cfg.c
+++ b/runtime/cfg.c
@@ -19,6 +19,7 @@ static size_t arp_static_sz;
 size_t arp_static_count;
 struct cfg_arp_static_entry *static_entries;
 int preferred_socket;
+bool use_sigaltstack = false;
 
 /*
  * Configuration Options
@@ -364,6 +365,13 @@ static int parse_enable_transparent_hugepages(const char *name, const char *val)
   return 0;
 }
 
+static int parse_use_sigaltstack(const char *name, const char *val)
+{
+	use_sigaltstack = true;
+	log_warn("cfg: using sigaltstack, preemption is not supported");
+	return 0;
+}
+
 /*
  * Parsing Infrastructure
  */
@@ -400,7 +408,6 @@ static const struct cfg_handler cfg_handlers[] = {
 	{ "enable_directpath", parse_enable_directpath, false },
 	{ "enable_gc", parse_enable_gc, false },
 	{ "enable_transparent_hugepages", parse_enable_transparent_hugepages, false},
-
 };
 
 /**
diff --git a/runtime/defs.h b/runtime/defs.h
index d77e3c1f..a9c6f0e5 100644
--- a/runtime/defs.h
+++ b/runtime/defs.h
@@ -457,6 +457,7 @@ extern unsigned int cfg_request_hardware_queues;
 extern uint64_t cfg_ht_punish_us;
 extern uint64_t cfg_qdelay_us;
 extern uint64_t cfg_quantum_us;
+extern bool use_sigaltstack;
 
 extern void kthread_park(void);
 extern void kthread_park_now(void);
diff --git a/runtime/init.c b/runtime/init.c
index 4e20ffeb..9220e00d 100644
--- a/runtime/init.c
+++ b/runtime/init.c
@@ -58,10 +58,10 @@ static const struct init_entry global_init_handlers[] = {
 /* per-kthread subsystem initialization */
 static const struct init_entry thread_init_handlers[] = {
 	/* runtime core */
+	THREAD_INITIALIZER(stack),
 	THREAD_INITIALIZER(preempt),
 	THREAD_INITIALIZER(kthread),
 	THREAD_INITIALIZER(ioqueues),
-	THREAD_INITIALIZER(stack),
 	THREAD_INITIALIZER(sched),
 	THREAD_INITIALIZER(timer),
 	THREAD_INITIALIZER(smalloc),
diff --git a/runtime/preempt.c b/runtime/preempt.c
index ad642061..cfb947c6 100644
--- a/runtime/preempt.c
+++ b/runtime/preempt.c
@@ -166,8 +166,25 @@ void preempt(void)
 
 int preempt_init_thread(void)
 {
+	stack_t ss;
+	struct stack *stk;
+
 	perthread_store(preempt_cnt, PREEMPT_NOT_PENDING);
 	perthread_store(uintr_stack, (void *)REDZONE_SIZE);
+
+	if (!use_sigaltstack)
+		return 0;
+
+	stk = stack_alloc();
+	if (!stk)
+		return -ENOMEM;
+
+	ss.ss_sp = &stk->usable[0];
+	ss.ss_size = RUNTIME_STACK_SIZE;
+	ss.ss_flags = 0;
+	if (sigaltstack(&ss, NULL) == -1)
+		return -errno;
+
 	return 0;
 }
 
@@ -184,6 +201,10 @@ int preempt_init(void)
 	int ret;
 	struct cpuid_info regs;
 #endif
+
+	if (use_sigaltstack)
+		return 0;
+
 	act.sa_flags = SA_SIGINFO | SA_NODEFER;
 
 	if (sigemptyset(&act.sa_mask) != 0) {
diff --git a/runtime/sched.c b/runtime/sched.c
index b89e6c28..d58a0fa1 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -809,6 +809,11 @@ static __always_inline thread_t *__thread_create(void)
 	preempt_enable();
 
 	th->stack = s;
+	th->syscallstack = stack_alloc();
+
+	BUG_ON(!th->syscallstack);
+
+
 	th->main_thread = false;
 	th->has_fsbase = false;
 	th->thread_ready = false;
@@ -919,6 +924,8 @@ static void thread_finish_exit(void)
 		init_shutdown(EXIT_SUCCESS);
 
 	stack_free(th->stack);
+	if (th->syscallstack)
+		stack_free(th->syscallstack);
 	tcache_free(perthread_ptr(thread_pt), th);
 
 	spin_lock(&myk()->lock);
-- 
2.43.0

