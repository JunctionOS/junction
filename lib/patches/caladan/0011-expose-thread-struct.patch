From ff1caa64f40b6dff5e9f14a9e3925a27af6cc35f Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 14 Feb 2023 18:16:43 -0500
Subject: [PATCH 11/35] expose thread struct

---
 inc/runtime/thread.h | 44 ++++++++++++++++++++++++++++++++++++++++----
 runtime/defs.h       | 21 ---------------------
 runtime/sched.c      | 10 ----------
 3 files changed, 40 insertions(+), 35 deletions(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index c653e681..7e0c61d9 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -4,9 +4,11 @@
 
 #pragma once
 
+#include <base/list.h>
 #include <base/thread.h>
 #include <base/types.h>
 #include <base/compiler.h>
+#include <base/trapframe.h>
 #include <runtime/preempt.h>
 #include <iokernel/control.h>
 
@@ -26,8 +28,6 @@ extern void thread_ready(thread_t *thread);
 extern void thread_ready_head(thread_t *thread);
 extern thread_t *thread_create(thread_fn_t fn, void *arg);
 extern thread_t *thread_create_with_buf(thread_fn_t fn, void **buf, size_t len);
-extern void __set_uthread_specific(thread_t *th, uint64_t val);
-extern uint64_t __get_uthread_specific(thread_t *th);
 extern void thread_set_fsbase(thread_t *th, uint64_t fsbase);
 
 DECLARE_PERTHREAD(thread_t *, __self);
@@ -47,14 +47,50 @@ inline thread_t *thread_self(void)
 	return perthread_read_stable(__self);
 }
 
+/*
+ * Thread support
+ */
+
+struct stack;
+
+struct thread {
+    struct thread_tf    tf;
+    struct list_node    link;
+    struct stack        *stack;
+    unsigned int        main_thread:1;
+    unsigned int        has_fsbase:1;
+    unsigned int        thread_ready;
+    unsigned int        thread_running;
+    unsigned int        last_cpu;
+    uint64_t        run_start_tsc;
+    uint64_t        ready_tsc;
+    uint64_t		fsbase;
+    uint64_t        tlsvar;
+#ifdef GC
+    struct list_node    gc_link;
+    unsigned int        onk;
+#endif
+};
+
+
+static inline uint64_t __get_uthread_specific(thread_t *th)
+{
+    return th->tlsvar;
+}
+
+static inline void __set_uthread_specific(thread_t *th, uint64_t val)
+{
+    th->tlsvar = val;
+}
+
 static inline uint64_t get_uthread_specific(void)
 {
-    return __get_uthread_specific(thread_self());
+    return thread_self()->tlsvar;
 }
 
 static inline void set_uthread_specific(uint64_t val)
 {
-    __set_uthread_specific(thread_self(), val);
+    thread_self()->tlsvar = val;
 }
 
 
diff --git a/runtime/defs.h b/runtime/defs.h
index c9d7a810..4309dbb6 100644
--- a/runtime/defs.h
+++ b/runtime/defs.h
@@ -45,27 +45,6 @@
  * Thread support
  */
 
-struct stack;
-
-struct thread {
-	struct thread_tf	tf;
-	struct list_node	link;
-	struct stack		*stack;
-	unsigned int		main_thread:1;
-	unsigned int		has_fsbase:1;
-	unsigned int		thread_ready;
-	unsigned int		thread_running;
-	unsigned int		last_cpu;
-	uint64_t		run_start_tsc;
-	uint64_t		ready_tsc;
-	uint64_t		fsbase;
-	uint64_t		tlsvar;
-#ifdef GC
-	struct list_node	gc_link;
-	unsigned int		onk;
-#endif
-};
-
 typedef void (*runtime_fn_t)(void);
 
 /* assembly helper routines from switch.S */
diff --git a/runtime/sched.c b/runtime/sched.c
index 7482514c..b47f981a 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -44,16 +44,6 @@ static DEFINE_PERTHREAD(uint64_t, last_tsc);
  */
 thread_t *thread_self(void);
 
-uint64_t __get_uthread_specific(thread_t *th)
-{
-	return th->tlsvar;
-}
-
-void __set_uthread_specific(thread_t *th, uint64_t val)
-{
-	th->tlsvar = val;
-}
-
 void thread_set_fsbase(thread_t *th, uint64_t fsbase)
 {
 	th->fsbase = fsbase;
-- 
2.43.0

