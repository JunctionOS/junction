From 8c5762501fbdb6fd09854e603b87b63f3925114d Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 5 Jun 2024 18:14:30 -0400
Subject: [PATCH 20/35] add const alias for thread_self

---
 bindings/rust/build.rs |  1 +
 inc/base/compiler.h    |  3 +++
 inc/base/thread.h      | 24 ++++++++++++++++++++++++
 inc/runtime/thread.h   |  6 ++++--
 runtime/sched.c        | 15 +++++++++++----
 5 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/bindings/rust/build.rs b/bindings/rust/build.rs
index 0a93d0ce..37c79b49 100644
--- a/bindings/rust/build.rs
+++ b/bindings/rust/build.rs
@@ -99,6 +99,7 @@ fn gen_bindings(root_dir: &Path) -> anyhow::Result<()> {
     let inc_dir = root_dir.join("inc");
     let bindings = bindgen::Builder::default()
         .clang_arg(format!("-I{}", inc_dir.to_str().unwrap()))
+        .clang_arg("-fheinous-gnu-extensions")
         // The input header we would like to generate
         // bindings for.
         .header("shenango.h")
diff --git a/inc/base/compiler.h b/inc/base/compiler.h
index e33bef17..10b17f06 100644
--- a/inc/base/compiler.h
+++ b/inc/base/compiler.h
@@ -57,6 +57,9 @@
 	 sizeof(t) == sizeof(int)   || \
 	 sizeof(t) == sizeof(long))
 
+#define type_is_pointer(t) \
+	(__builtin_types_compatible_p(typeof(t), typeof(&*t)))
+
 /*
  * These attributes are defined only with the sparse checker tool.
  */
diff --git a/inc/base/thread.h b/inc/base/thread.h
index e8a5feaa..07201300 100644
--- a/inc/base/thread.h
+++ b/inc/base/thread.h
@@ -16,6 +16,13 @@
   typeof(type) __perthread_##name __perthread                                  \
       __attribute__((section(".perthread,\"\",@nobits#")))
 
+#define DEFINE_PERTHREAD_ALIAS(type, name, alias_name)                         \
+  extern typeof(type) __perthread_##alias_name                                 \
+      __attribute__((alias ("__perthread_"#name)))
+
+#define DECLARE_PERTHREAD_ALIAS(type, name, alias_name)                         \
+  extern typeof(type) __perthread_##alias_name
+
 /* used to make perthread variables externally available */
 #define DECLARE_PERTHREAD(type, name) extern DEFINE_PERTHREAD(type, name)
 
@@ -95,6 +102,12 @@ extern const char __perthread_start[];
     }                                                                          \
   } while (0);
 
+#define __perthread_read_const_p(key)                                          \
+  ({                                                                           \
+    BUILD_ASSERT(type_is_pointer(key));                                        \
+    __perthread_read_qual((typeof(&*key)) key, /* */);                         \
+  })
+
 /**
  * perthread_incr - increments a native-type perthread
  * variable using a single instruction.
@@ -152,6 +165,17 @@ extern const char __perthread_start[];
 #define perthread_read_stable(var)                                             \
   __perthread_read_qual(__perthread_##var, /* */)
 
+/**
+ * perthread_read_const_p - read the value stored at
+ * a native-type perthread variable. The value must be a const pointer and
+ * may be cached by the compiler.
+ * @var: the perthread variable (of type T * const)
+ *
+ * Returns the pointer stored at @var
+ *
+ */
+#define perthread_read_const_p(var) __perthread_read_const_p(__perthread_##var)
+
 /**
  * perthread_ptr_stable - get a pointer to a local perthread variable
  * result may be cached by compiler.
diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index 18dcc673..9f5231ac 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -32,6 +32,8 @@ extern void thread_set_fsbase(thread_t *th, uint64_t fsbase);
 extern void thread_free(thread_t *th);
 
 DECLARE_PERTHREAD(thread_t *, __self);
+DECLARE_PERTHREAD_ALIAS(thread_t * const, __self, __const_self);
+
 DECLARE_PERTHREAD(unsigned int, kthread_idx);
 DECLARE_PERTHREAD(uint64_t, runtime_fsbase);
 
@@ -43,9 +45,9 @@ static inline unsigned int get_current_affinity(void)
 /**
  * thread_self - gets the currently running thread
  */
-inline thread_t *thread_self(void)
+static inline thread_t *thread_self(void)
 {
-	return perthread_read_stable(__self);
+	return perthread_read_const_p(__const_self);
 }
 
 /*
diff --git a/runtime/sched.c b/runtime/sched.c
index 77edfc9e..82c73193 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -21,6 +21,8 @@
 
 /* the current running thread, or NULL if there isn't one */
 DEFINE_PERTHREAD(thread_t *, __self);
+DEFINE_PERTHREAD_ALIAS(thread_t * const, __self, __const_self);
+
 /* a pointer to the top of the per-kthread (TLS) runtime stack */
 DEFINE_PERTHREAD(void *, runtime_stack);
 DEFINE_PERTHREAD(uint64_t, runtime_fsbase);
@@ -332,7 +334,7 @@ static __noreturn __noinline void schedule(void)
 {
 	struct kthread *r = NULL, *l = myk();
 	uint64_t start_tsc;
-	thread_t *th = NULL;
+	thread_t *th;
 	unsigned int start_idx;
 	unsigned int iters = 0;
 	int i, sibling;
@@ -343,10 +345,15 @@ static __noreturn __noinline void schedule(void)
 	/* detect misuse of preempt disable */
 	BUG_ON((perthread_read(preempt_cnt) & ~PREEMPT_NOT_PENDING) != 1);
 
+	th = perthread_read_stable(__self);
+	assert(th == thread_self());
+
 	/* unmark busy for the stack of the last uthread */
-	if (likely(perthread_get_stable(__self) != NULL)) {
-		store_release(&perthread_get_stable(__self)->thread_running, false);
-		perthread_get_stable(__self) = NULL;
+	if (likely(th != NULL)) {
+		store_release(&th->thread_running, false);
+		th->cur_kthread = NCPU;
+		perthread_store(__self, NULL);
+		th = NULL;
 	}
 
 	/* update entry stat counters */
-- 
2.43.0

